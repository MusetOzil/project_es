import re

# 常见的正则匹配规则
"""
单字符撇匹配

\d : 匹配数字0-9
\D: 匹配非数字 [^\d] [^0-9]
\w: 匹配单词字符[a-zA-Z0-9_]
\W: 匹配非单词字符 [^\w]
\s: 匹配空白字符 （空格、\t....）
\S: 匹配非空白字符 [^\s]
. 匹配除了换行符'\n'之外的任意字符


多字符匹配（贪婪：尽可能多的匹配）
* 匹配*前的正则表达式,任意次数
? 匹配？前的正则表达式,0次或1次
+ 匹配+前的正则表达式,至少一次
{n,m} 匹配{n,m}前的正则表达式, n到m次
{n} 匹配{n}前的正则表达式, n次

非贪婪匹配 (非贪婪匹配：尽可能少的匹配)
*?
??
+?

其他：
 |  或：匹配左边和右边的正则表达式之一
 () 分组
 ^ 匹配字符串开头
 $ 匹配字符串结尾
"""
"""
re 模块

compile 方法：将正则表达式的字符串形式编译为一个 Pattern 对象
match 方法：从起始位置开始匹配符合规则的字符串，
           单次匹配，匹配成功，立即返回Match对象，
           未匹配成功则返回None
search 方法：从整个字符串中匹配符合规则的字符串，
           单次匹配，匹配成功，立即返回Match对象，
           未匹配成功则返回None
findall 方法：匹配所有合规则的字符串，匹配到的字符串放到
            一个列表中，未匹配成功返回空列表
finditer 方法：匹配所有合规则的字符串，返回一个可迭代对象

split 方法：根据正则匹配规则分割字符串，返回分割后的一个列表

sub 方法：替换匹配成功的指定位置字符串
"""
sub_str = "sdfasgdfgsrgeworgonsdnagonaeong"
patten = re.
